{
	"info": {
		"_postman_id": "3076eae0-8254-4cfa-bd77-37a9f9e4b3b7",
		"name": "workshop01",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1453931",
		"_collection_link": "https://red-firefly-245852.postman.co/workspace/fullstack-testing~2ebd74af-a9d3-4976-9aeb-47141276dc91/collection/1453931-3076eae0-8254-4cfa-bd77-37a9f9e4b3b7?action=share&source=collection_link&creator=1453931"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Login :: Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Login :: Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      id: { type: \"number\" },",
							"      username: { type: \"string\" },",
							"      email: { type: \"string\", format: \"email\" },",
							"      firstName: { type: \"string\" },",
							"      lastName: { type: \"string\" },",
							"      gender: { type: \"string\" },",
							"      image: { type: \"string\" },",
							"      token: { type: \"string\" }",
							"    },",
							"    required: [\"id\", \"username\", \"email\", \"firstName\", \"lastName\", \"gender\", \"image\", \"token\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							"",
							"pm.test(\"Login :: Token in the response is not null\", function () {",
							"    var response = pm.response.json();",
							"    pm.expect(response.token).to.not.be.null;",
							"});",
							"// Test to check that the username does not have any special characters",
							"pm.test(\"Login :: Username does not contain special characters\", function () {",
							"  const response = pm.response.json();",
							"  pm.expect(response.username).to.match(/^[a-zA-Z0-9_]+$/);",
							"});",
							"// Test to check that the token is in JWT format",
							"pm.test(\"Login :: Token is in JWT format\", function () {",
							"    const response = pm.response.json();",
							"    const token = response.token;",
							"    pm.expect(token.split('.').length).to.eql(3, \"Token should have 3 segments separated by '.'\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"kminchelle\",\n    \"password\": \"0lelplR\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://dummyjson.com/auth/login",
					"protocol": "https",
					"host": [
						"dummyjson",
						"com"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		}
	]
}